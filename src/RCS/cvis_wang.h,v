head	1.13;
access;
symbols
	ver1_2:1.11
	ver1_12:1.10
	ver1_11:1.10
	ver1_1:1.9
	ver1_03:1.9
	ver1_02:1.8
	v1_01:1.8
	v1_0:1.7
	beta1:1.7;
locks
	kerryveenstra:1.13; strict;
comment	@ * @;


1.13
date	2013.07.12.20.25.56;	author kerryveenstra;	state Exp;
branches;
next	1.12;

1.12
date	2013.06.14.02.47.04;	author kerryveenstra;	state Exp;
branches;
next	1.11;

1.11
date	2011.12.07.07.48.24;	author kerryveenstra;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.16.06.03.49;	author kerryveenstra;	state Exp;
branches;
next	1.9;

1.9
date	2011.10.30.04.22.38;	author kerryveenstra;	state Exp;
branches;
next	1.8;

1.8
date	2011.10.26.21.17.45;	author kerryveenstra;	state Exp;
branches;
next	1.7;

1.7
date	2011.10.26.01.11.24;	author kerryveenstra;	state Exp;
branches;
next	1.6;

1.6
date	2011.08.05.16.19.50;	author kerryveenstra;	state Exp;
branches;
next	1.5;

1.5
date	2011.06.30.05.37.40;	author kerryveenstra;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.05.04.54.23;	author kerryveenstra;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.01.01.57.00;	author kerryveenstra;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.25.15.20.59;	author kerryveenstra;	state Exp;
branches;
next	1.1;

1.1
date	2011.03.25.11.05.02;	author kerryveenstra;	state Exp;
branches;
next	;


desc
@Wang's cumulative-visibility algorithm
@


1.13
log
@added array of active viewpoints
@
text
@/**************************************************************************

File:           cvis_wang.cpp

Description:    This file defines routines that create, compute, and free
                terrain-visibility data.

Global Functions:

                cvis_wang_malloc()
                cvis_wang_count()
                cvis_wang_malloc_count()
                cvis_wang_free()

Reference:      This file's algorithm is found in the following paper.
                This program's variable names are inspired by the paper's
                equations.

                @@article{Wang:2000a,
                author = {Jianjun Wang and Gary J. Robinson and Kevin White},
                title = {Generating Viewsheds without Using Sightlines},
                journal = {Photogrammetric Engineering \& Remote Sensing},
                year = {2000},
                volume = {66},
                number = {1},
                pages = {87--90},
                month = {January}
                }

**************************************************************************/

typedef struct
{
    int     origin_lon_deg;     // [-180 .. 180].  Is < 0 in North America.
    int     origin_lat_deg;     // [ -90 ..  90].
    int     i_min;
    int     i_max;
    int     j_min;
    int     j_max;

    char   *visible[MAX_INDEX + 1];
} CVIS_WANG;

void cvis_wang_malloc
(
    CVIS_WANG **pv,     // pointer to cache of visibility struct
    int      ***pz,     // pointer to cache of heights (yes, *** is correct)
    SRTM_TILE  *srtm,
    int         num_viewpoints,
    int        *pii,    // pointer to viewpoints' horizontal pixel coordinates
    int        *pjj,    // pointer to viewpoints' vertical pixel coordinates
    bool       *pactive,    // array of bools, true if viewpoint is active
    int         radius_max
);

int cvis_wang_count
(
    CVIS_WANG **pv
);

int cvis_wang_malloc_count
(
    CVIS_WANG **pv,
    int      ***pz,
    SRTM_TILE  *srtm,
    int         num_viewpoints,
    int        *pii,
    int        *pjj,
    bool       *pactive,    // array of bools, true if viewpoint is active
    int         radius_max
);

void cvis_wang_free
(
    CVIS_WANG **pv,
    int      ***pz
);

@


1.12
log
@improved comments
@
text
@d52 1
d69 1
@


1.11
log
@added cvis_wang_count()
@
text
@d1 30
a30 8
// -------------------------------------------------------------------------
//
// File:        cvis-wang.h
//
// Purpose:     This file declares routines that create and free
//              terrain-visibility data.
//
// -------------------------------------------------------------------------
@


1.10
log
@move i and j limits into structs
@
text
@d33 5
@


1.9
log
@added cvis_wang_malloc_count()
@
text
@d14 5
d41 1
a41 5
    int         radius_max,
    int         window_bottom_edge,
    int         window_top_edge,
    int         window_left_edge,
    int         window_right_edge
@


1.8
log
@cvis_wang_malloc() now takes a list of viewpoints
@
text
@d28 15
@


1.7
log
@reverting to version as of 2011/07/17
@
text
@d22 4
a25 3
    int         ii,
    int         jj,
    int         radius
@


1.6
log
@support four HGT files
@
text
@d10 1
a10 1
typedef struct CVIS_WANG
d14 1
a14 2
    int     max_index;          // of array below
    char   *visible[1];         // Actual length set during memory allocation
a23 1
    int         h_max,
@


1.5
log
@added header comment
added radius
@
text
@d10 1
a10 1
typedef struct
d14 2
a15 1
    char   *visible[MAX_INDEX + 1];
d25 1
@


1.4
log
@reuse z array to avoid stressing memory management
@
text
@d1 9
d23 2
a24 1
    int         jj
@


1.3
log
@corrected prototype for cvis_wang_free
@
text
@d8 1
a8 1
CVIS_WANG *cvis_wang_malloc
d10 2
d17 5
a21 1
void cvis_wang_free (CVIS_WANG **v);
@


1.2
log
@correct spelling of origin
z --> visible
@
text
@d15 1
a15 1
void cvis_wang_free (CVIS_WANG *v);
@


1.1
log
@Initial revision
@
text
@d4 2
a5 2
    int     origon_lat_deg;     // [ -90 ..  90].
    INT32  *z[MAX_INDEX + 1];
d16 1
@
