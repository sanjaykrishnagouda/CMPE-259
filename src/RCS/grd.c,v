head	1.1;
access;
symbols
	ver1_2:1.1
	ver1_12:1.1
	ver1_11:1.1
	ver1_1:1.1
	ver1_03:1.1;
locks; strict;
comment	@ * @;


1.1
date	2011.10.30.08.28.37;	author kerryveenstra;	state Exp;
branches;
next	;


desc
@gradient ascent algorithm
@


1.1
log
@Initial revision
@
text
@#include <stdio.h>

#include "srtm.h"
#include "cvis_wang.h"
#include "visibility.h"


/*
 *  Purpose:    Evolve the positions of several viewpoints by gradient ascent,
 *              choosing paths that maximize the total number of map locations
 *              that are visible to any of the viewpoints.
 *
 *  ...
 *
 *  Returns:    Nothing.
 */
void grd_ascend
(
    int     num_viewpoints,
    int    *viewpoint_initial_i,
    int    *viewpoint_initial_j,
    int     radius_max,
    int     iterations_max,
    int     window_left_edge,
    int     window_right_edge,
    int     window_bottom_edge,
    int     window_top_edge,
    const char *filename
)
{
    int     di;
    int     dj;
    int     k;
    int     n;
    int     n_best;
    int     n0;
    int     pi[MAX_NUM_VIEWPOINTS];
    int     pj[MAX_NUM_VIEWPOINTS];
    int     pi_best[MAX_NUM_VIEWPOINTS];
    int     pj_best[MAX_NUM_VIEWPOINTS];
    int     t;

    // Initailize viewpoint locations pi[] and pj[].
    for (k = 0; k < num_viewpoints; ++k)
    {
        pi[k] = viewpoint_initial_i[k];
        pj[k] = viewpoint_initial_j[k];
    }


    // Update locations pi[], pj[] as they follow the
    // gradient of the objective function.

    t = 0;

    // N + 1/2 loop
    for (;;)
    {
        // Print the viewpoint locations.
        printf("t = %2d", t);

        for (k = 0; k < num_viewpoints; ++k)
        {
            printf(" %4d %4d", pi[k], pj[k]);
        }

        printf("\n");


        if (t++ >= iterations_max) break;


        // Move each viewpoint by determining its gradient
        // and then nudging the viewpoint in that direction.

        for (k = 0; k < num_viewpoints; ++k)
        {
            // Determine the best new location for each viewpoint.
//printf("        k=%d\n", k);

            // Start with viewpoint k's current location.
            n = cvis_wang_malloc_count(&v, &z, srtm,
                                       num_viewpoints,
                                       pi,
                                       pj,
                                       radius_max,
                                       window_bottom_edge,
                                       window_top_edge,
                                       window_left_edge,
                                       window_right_edge);

            pi_best[k]  = pi[k];
            pj_best[k]  = pj[k];
            n_best      = n;
//printf("        n_best=%d\n", n_best);

            for (di = -2; di <= 2; ++di)
            {
                for (dj = -2; dj <= 2; ++dj)
                {
                    // Compute N(di,dj).
                    
                    // Temporarily nudge viewpoint k in direction di, dj.
                    pi[k] += di;
                    pj[k] += dj;

                    // Compute resulting N(di,dj).
                    n = cvis_wang_malloc_count(&v, &z, srtm,
                                               num_viewpoints,
                                               pi,
                                               pj,
                                               radius_max,
                                               window_bottom_edge,
                                               window_top_edge,
                                               window_left_edge,
                                               window_right_edge);

//printf("        n(%2d,%2d)=%d\n", di, dj, n);
                    if (n > n_best)
                    {
                        // Save the best new location for viewpoint k.
                        pi_best[k]  = pi[k];
                        pj_best[k]  = pj[k];
                        n_best      = n;
                    }

                    // Restore viewpoint k.
                    pi[k] -= di;
                    pj[k] -= dj;
                }
            }
        }

        // Update all locations to those that made the best improvement
        // in the objective function.
        for (k = 0; k < num_viewpoints; ++k)
        {
            pi[k] = pi_best[k];
            pj[k] = pj_best[k];
        }

        // TODO: report the locations
        // eventually write to filename
        // Now just printf.
    }
}

@
