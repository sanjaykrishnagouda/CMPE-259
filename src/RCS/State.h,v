head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2013.07.12.18.54.46;	author kerryveenstra;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.14.02.48.30;	author kerryveenstra;	state Exp;
branches;
next	1.3;

1.3
date	2013.03.28.17.02.23;	author kerryveenstra;	state Exp;
branches;
next	1.2;

1.2
date	2013.02.24.08.32.53;	author kerryveenstra;	state Exp;
branches;
next	1.1;

1.1
date	2013.02.19.08.59.55;	author kerryveenstra;	state Exp;
branches;
next	;


desc
@header for class State
@


1.5
log
@added communicating array
switched order of force_viewpoint and its associated int
@
text
@/**************************************************************************

    File:           State.h

    Class:          State

    Description:    This object holds a set of viewpoints.  All of its
                    data fields are public, but it provides a few access
                    methods.

                    The int arrays pi[] and pj[] contain coordinates of
                    viewpoints.  The int num_viewpoints stores the number
                    of valid viewpoints in the array (the greatest valid
                    array index is num_viewpoints - 1).

                    sa_rand_next_state()    Helper function with the wrong
                                            prefix.

    Methods:        delete_viewpoint(k)     Reduce number of viewpoints.
                    print(s)                Send debugging info to stdout.

**************************************************************************/

class State
{
    public:
        int num_viewpoints;                     // TODO Rework as a vector
        int pi[MAX_NUM_VIEWPOINTS];             // TODO Rework as a vector
        int pj[MAX_NUM_VIEWPOINTS];             // TODO Rework as a vector
        bool pcommunicating[MAX_NUM_VIEWPOINTS];    // TODO Rework as a vector
        State() {};
        State(int n, int *pi, int *pj, bool *pcom = NULL);
        void delete_viewpoint(int k);
        void print(const char *prefix);
};


State sa_rand_next_state
(
    State       S,
    int         sensor_radius_max,
    int         jump_radius_max,
    Disk        exploration_region,
    CVIS_WANG  *v,
    bool        force_viewpoint = false,
    int         forced_k = 0
);


@


1.4
log
@improved comments
@
text
@d27 4
a30 3
        int num_viewpoints;             // TODO Rework as a vector
        int pi[MAX_NUM_VIEWPOINTS];     // TODO Rework as a vector
        int pj[MAX_NUM_VIEWPOINTS];     // TODO Rework as a vector
d32 1
a32 1
        State(int n, int *pi, int *pj);
d45 2
a46 2
    int         forced_k = 0,
    bool        force_viewpoint = false
@


1.3
log
@Added support for distributed algorithm.
@
text
@d1 23
a23 6
//  Class:          State
//
//  Description:    A set of viewpoints.
//
//  Methods:        None.  All data is public.
//
@


1.2
log
@added delete_viewpoint
sa_rand_double() to ge_rand_double()
@
text
@d10 3
a12 3
        int num_viewpoints;
        int pi[MAX_NUM_VIEWPOINTS];
        int pj[MAX_NUM_VIEWPOINTS];
d23 6
a28 3
    int         visibility_radius_max,
    int         dist_max,
    CVIS_WANG  *v
@


1.1
log
@Initial revision
@
text
@d15 1
a19 1
double sa_rand_double();
@
