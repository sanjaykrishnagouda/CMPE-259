head	1.9;
access;
symbols
	ver1_2:1.8
	ver1_12:1.8
	ver1_11:1.8
	ver1_1:1.8
	ver1_03:1.8
	ver1_02:1.8
	v1_01:1.7
	v1_0:1.7
	beta1:1.6;
locks; strict;
comment	@# @;


1.9
date	2013.06.14.02.47.04;	author kerryveenstra;	state Exp;
branches;
next	1.8;

1.8
date	2011.10.27.22.40.32;	author kerryveenstra;	state Exp;
branches;
next	1.7;

1.7
date	2011.10.26.06.14.32;	author kerryveenstra;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.26.01.11.24;	author kerryveenstra;	state Exp;
branches;
next	1.5;

1.5
date	2011.08.05.16.20.19;	author kerryveenstra;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.20.22.17.18;	author kerryveenstra;	state Exp;
branches;
next	1.3;

1.3
date	2011.06.30.05.38.08;	author kerryveenstra;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.25.15.22.23;	author kerryveenstra;	state Exp;
branches;
next	1.1;

1.1
date	2011.03.25.11.04.51;	author kerryveenstra;	state Exp;
branches;
next	;


desc
@Wang's cumulative-visibility algorithm
@


1.9
log
@improved comments
@
text
@/**************************************************************************

File:           cvis_wang.i

Description:    This include file defines macros that are used in
                cvis_wang.c .  These parts of the program are defined as
                macros for performance reasons.  They are called eight
                times in cvis_wang.c, once for each octant.

                This file's algorithm is found in the following paper.
                This program's variable names are inspired by the paper's
                equations.

                @@article{Wang:2000a,
                author = {Jianjun Wang and Gary J. Robinson and Kevin White},
                title = {Generating Viewsheds without Using Sightlines},
                journal = {Photogrammetric Engineering \& Remote Sensing},
                year = {2000},
                volume = {66},
                number = {1},
                pages = {87--90},
                month = {January}
                }

**************************************************************************/

#if OCTANT == 1 || OCTANT == 2 || OCTANT == 7 || OCTANT == 8
#define DELTA_I         +1
#define I_LIMIT_CHECK   (i <= MAX_INDEX && i <= ii + radius_max)
#else
#define DELTA_I         -1
#define I_LIMIT_CHECK   (i >= 0         && i >= ii - radius_max)
#endif


#if OCTANT == 1 || OCTANT == 2 || OCTANT == 3 || OCTANT == 4
#define DELTA_J         +1
#define J_LIMIT_CHECK   (j <= MAX_INDEX && j <= jj + radius_max)
#else
#define DELTA_J         -1
#define J_LIMIT_CHECK   (j >= 0         && j >= jj - radius_max)
#endif


#define Hp3             (h[i][j] - base_elevation)
#define Zp3             z[i][j]
#define Vis             visible[i][j]
#define R_SQUARED       ((ii - i) * (ii - i) + (jj - j) * (jj - j))
#define CHECK_VIS       if (a >= b && R_SQUARED <= radius_max_squared) Vis = 1


#if OCTANT == 1 || OCTANT == 4 || OCTANT == 5 || OCTANT == 8


#define Zp1             z[i - DELTA_I][j - DELTA_J]
#define Zp2             z[i - DELTA_I][j]

    for (i = ii + 2 * DELTA_I, di = 2;
         I_LIMIT_CHECK;
         i = i + DELTA_I, ++di)
    {
        // First point is along horizontal ray where j = jj.
        // Ignore Zp1 because it references into adjacent octant.
        j   = jj;
        a   = Hp3;
        b   = di * Zp2 / (di - 1);
        Zp3 = max(a, b);
        CHECK_VIS;

        // Interior of octant
        for (j = jj + DELTA_J, dj = 1;
             dj < di && J_LIMIT_CHECK;
             j = j + DELTA_J, ++dj)
        {
            a   = Hp3;
            b   = (dj * Zp1 + (di - dj) * Zp2) / (di - 1);
            Zp3 = max(a, b);
            CHECK_VIS;
        }

        // Point along diagonal ray?
        if (dj == di && J_LIMIT_CHECK)
        {
            // Ignore Zp2 because it references adjacent octant.
            a   = Hp3;
            b   = dj * Zp1 / (di - 1);
            Zp3 = max(a, b);
            CHECK_VIS;
        }
    }


#else


#define Zp1             z[i - DELTA_I][j - DELTA_J]
#define Zp2             z[i][j - DELTA_J]

    for (j = jj + 2 * DELTA_J, dj = 2;
         J_LIMIT_CHECK;
         j = j + DELTA_J, ++dj)
    {
        // First point si along vertical ray where i = ii.
        // Ignore Zp1 because it references into adjacent octant.
        i   = ii;
        a   = Hp3;
        b   = dj * Zp2 / (dj - 1);
        Zp3 = max(a, b);
        CHECK_VIS;

        // Interior of octant
        for (i = ii + DELTA_I, di = 1;
             di < dj && I_LIMIT_CHECK;
             i = i + DELTA_I, ++di)
        {
            a   = Hp3;
            b   = (di * Zp1 + (dj - di) * Zp2) / (dj - 1);
            Zp3 = max(a, b);
            CHECK_VIS;
        }

        // Point along diagonal ray?
        if (di == dj && I_LIMIT_CHECK)
        {
            // Ignore Zp2 because it references adjacent octant.
            a   = Hp3;
            b   = di * Zp1 / (dj - 1);
            Zp3 = max(a, b);
            CHECK_VIS;
        }
    }

#endif

#undef DELTA_I
#undef I_LIMIT_CHECK
#undef DELTA_J
#undef J_LIMIT_CHECK

#undef CHECK_VIS
#undef R_SQUARED
#undef Vis
#undef Hp3
#undef Zp1
#undef Zp2
#undef Zp3
@


1.8
log
@Support visibility from multiple viewpoints.
@
text
@d1 25
a25 25
// -------------------------------------------------------------------------
//
// File:        cvis_wang.i
//
// Purpose:     This include file defines macros that are used in
//              cvis_wang.c .  These parts of the program are defined as
//              macros for performance reasons.  They are called eight
//              times in cvis_wang.c, once for each octant.
//
// Reference:   This file's algorithm is found in the following paper.
//              This program's variable names are inspired by the paper's
//              equations.
//
//              @@article{Wang:2000a,
//                author = {Jianjun Wang and Gary J. Robinson and Kevin White},
//                title = {Generating Viewsheds without Using Sightlines},
//                journal = {Photogrammetric Engineering \& Remote Sensing},
//                year = {2000},
//                volume = {66},
//                number = {1},
//                pages = {87--90},
//                month = {January}
//              }
//
// -------------------------------------------------------------------------
@


1.7
log
@Improve performance when computing range-limited cummulative visibility.
@
text
@d49 1
a49 1
#define CHECK_VIS       Vis = (a >= b && R_SQUARED <= radius_max_squared)
@


1.6
log
@reverting to version as of 2011/07/17
@
text
@d29 1
a29 1
#define I_LIMIT_CHECK   (i <= MAX_INDEX)
d32 1
a32 1
#define I_LIMIT_CHECK   (i >= 0)
d38 1
a38 1
#define J_LIMIT_CHECK   (j <= MAX_INDEX)
d41 1
a41 1
#define J_LIMIT_CHECK   (j >= 0)
@


1.5
log
@support four HGT files
cap height (although now seems unnecessary)
@
text
@d29 1
a29 2
//#define I_LIMIT_CHECK   (i <= max_index)
#define I_LIMIT_CHECK   (i <= max_index && i <= ii + radius_max)
d32 1
a32 2
//#define I_LIMIT_CHECK   (i >= 0)
#define I_LIMIT_CHECK   (i >= 0         && i >= ii - radius_max)
d38 1
a38 1
#define J_LIMIT_CHECK   (j <= max_index && j <= jj + radius_max)
d41 1
a41 1
#define J_LIMIT_CHECK   (j >= 0         && j >= jj - radius_max)
d67 1
a67 1
        Zp3 = min(max(a, b), h_max);
d77 1
a77 1
            Zp3 = min(max(a, b), h_max);
d87 1
a87 1
            Zp3 = min(max(a, b), h_max);
d108 1
a108 1
        Zp3 = min(max(a, b), h_max);
d118 1
a118 1
            Zp3 = min(max(a, b), h_max);
d128 1
a128 1
            Zp3 = min(max(a, b), h_max);
@


1.4
log
@I_LIMIT_CHECK and J_LIMIT_CHECK now consider radius_max
@
text
@d29 2
a30 2
#define I_LIMIT_CHECK   (i <= MAX_INDEX)
#define I_LIMIT_CHECK   (i <= MAX_INDEX && i <= ii + radius_max)
d33 1
a33 1
#define I_LIMIT_CHECK   (i >= 0)
d40 1
a40 1
#define J_LIMIT_CHECK   (j <= MAX_INDEX && j <= jj + radius_max)
d69 1
a69 1
        Zp3 = max(a, b);
d79 1
a79 1
            Zp3 = max(a, b);
d89 1
a89 1
            Zp3 = max(a, b);
d110 1
a110 1
        Zp3 = max(a, b);
d120 1
a120 1
            Zp3 = max(a, b);
d130 1
a130 1
            Zp3 = max(a, b);
@


1.3
log
@added header comment
abstracted visibility check through CHECK_VIS
@
text
@d30 1
d34 1
d40 1
a40 1
#define J_LIMIT_CHECK   (j <= MAX_INDEX)
d43 1
a43 1
#define J_LIMIT_CHECK   (j >= 0)
@


1.2
log
@complete cvis function
@
text
@d1 26
d48 2
d68 1
a68 1
        Vis = (a >= b);
d78 1
a78 1
            Vis = (a >= b);
d88 1
a88 1
            Vis = (a >= b);
d109 1
a109 1
        Vis = (a >= b);
d119 1
a119 1
            Vis = (a >= b);
d129 1
a129 1
            Vis = (a >= b);
d140 2
@


1.1
log
@Initial revision
@
text
@d21 1
d40 1
d50 1
d60 1
d81 1
a81 1
int trace_on = 0;
a87 1
if (j == 3481 && i == 2) trace_on = 1;
d91 1
d101 1
d112 1
@
